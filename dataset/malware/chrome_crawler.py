"""
Python script for mass downloading (hopefully) clean .exes from download.cnet.com 
"""

print("I'm going to steal lots of .exes!")

import requests
import html5lib
from bs4 import BeautifulSoup 

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.chrome.options import Options
import os
# going to need selenium as can't get around authentication... 
# perhaps also need headless chrome? yeah need chrome driver:   https://sites.google.com/a/chromium.org/chromedriver/downloads 


"""
main_download_url = "https://download.cnet.com/windows/?sort=mostPopular&price=free"
# Only want windows, sorted by popularity and free software

list_of_apps = []

response = requests.get(main_download_url)

soup = BeautifulSoup(response.content, 'html5lib')
#print(soup.prettify())

table = soup.find('div', class_='g-grid-container u-grid-columns c-searchResults')
"""



# Just a test to see if we can grab names+urls of first 10 apps, yes we can 
"""
for row in table.findAll('div', class_='c-globalCard lg:u-col-3 md:u-col-3 sm:u-col-2 c-productCard u-flexbox-column c-productCard-detailed'):
    app_name = row.find('div', class_='c-productCard_info')
    print(app_name.h3.string)
    app_page_link = row.find('a', class_='c-productCard_link')
    print(app_page_link['href'])
"""

#program_response = requests.get(url,headers=my_headers)

# attempt download...  make sure to stream so do not hold everything in memory at once...
"""
def download_file(url,my_headers):
    local_filename = url.split('/')[-1]
    # or can replace local_filename with name of our app
    # note the stream=True parameter below
    with requests.get(url, headers=my_headers, stream=True) as r:
        r.raise_for_status()
        with open(local_filename, 'wb') as f:
            for chunk in r.iter_content(chunk_size=8192): 
                # If you have chunk encoded response uncomment if
                # and set chunk_size parameter to None.
                #if chunk: 
                f.write(chunk)
    return local_filename

download_file(url,my_headers)
"""

# download with selenium

# function to take care of downloading file
def enable_download_headless(browser,download_dir):
    browser.command_executor._commands["send_command"] = ("POST", '/session/$sessionId/chromium/send_command')
    params = {'cmd':'Page.setDownloadBehavior', 'params': {'behavior': 'allow', 'downloadPath': download_dir}}
    browser.execute("send_command", params)

# instantiate a chrome options object so you can set the size and headless preference
# some of these chrome options might be uncessary but I just used a boilerplate
# change the <path_to_download_default_directory> to whatever your default download folder is located
chrome_options = Options()
chrome_options.add_argument("--headless")
chrome_options.add_argument("--window-size=1920x1080")
chrome_options.add_argument("--disable-notifications")
chrome_options.add_argument('--no-sandbox')
chrome_options.add_argument('--verbose')
chrome_options.add_experimental_option("prefs", {
        "download.default_directory": "C:\\Users\\Emily\\Documents\\UCL\\ncc-project\\cdt-nccgroup\\dataset\\cleanware\\test",
        "download.prompt_for_download": False,
        "download.directory_upgrade": True,
        "safebrowsing_for_trusted_sources_enabled": False,
        "safebrowsing.enabled": True,
        "excludeSwitches": ["enable-automation"],
        "useAutomationExtension": False,
})
chrome_options.add_argument('--disable-gpu')
chrome_options.add_argument('--disable-software-rasterizer')

# initialize driver object and change the <path_to_chrome_driver> depending on your directory where your chromedriver should be
driver = webdriver.Chrome(options=chrome_options, executable_path="C:\\Users\\Emily\\Documents\\UCL\\ncc-project\\cdt-nccgroup\\dataset\\chromedriver.exe")
print ("Headless Chrome Initialized")

# change the <path_to_place_downloaded_file> to your directory where you would like to place the downloaded file
download_dir = "C:\\Users\\Emily\\Documents\\UCL\\ncc-project\\cdt-nccgroup\\dataset\\cleanware\\test"

# function to handle setting up headless download
enable_download_headless(driver, download_dir)
print("Enable Headless Download")

# get request to target the site selenium is active on
# driver.get("https://www.thinkbroadband.com/download")

driver.get("https://download.cnet.com/CCleaner/3000-18512_4-10315544.html")

#driver.get("https://google.com")


# add wait time so elements can load properly
timeout = 20

try:
    element_present = EC.presence_of_element_located(By.ID, '.c-globalButton.g-text-small.c-productActionButton_button.c-productActionButton_button-standard.u-text-uppercase.c-globalButton-medium.c-globalButton-standard')
    WebDriverWait(driver, timeout).until(element_present)
    ("I could find the button and loaded properly")
except TimeoutException:
    print("Timed out waiting for page to load")

"""
try:
    element_present = EC.presence_of_element_located((By.CLASS_NAME, "spch-dlg"))
    WebDriverWait(driver, timeout).until(element_present)
    print("I could find the button and loaded properly")
except TimeoutException:
    print("Timed out waiting for page to load")
"""
# download_button = driver.find_element_by_css_selector('.c-globalButton.g-text-small.c-productActionButton_button.c-productActionButton_button-standard.u-text-uppercase.c-globalButton-medium.c-globalButton-standard')

# i think it is failing bc global = everything is not loading, something to do with boomerang

# now need to click with javascript, bc selenium is being a little bitch
#download_button = driver.find_element_by_css_selector("a[href*='/3001-18512_4-10315544.html']")
"""
js_click = "arguments[0].click();"
driver.execute_script(js_click,download_button)
"""
# initialize an object to the location on the html page and click on it to download

#search_input = driver.find_element_by_css_selector('#c-productActionButton > div > div:nth-child(1) > div > div > a > div')

# def this one is being clicked
#search_input = driver.find_element_by_css_selector('.c-globalButton.g-text-small.c-productActionButton_button.c-productActionButton_button-standard.u-text-uppercase.c-globalButton-medium.c-globalButton-standard')






#search_input = driver.find_element_by_css_selector('.sm:u-col-2.md:u-col-3.lg:u-col-6')
#search_input = driver.find_element_by_css_selector('/CCleaner/3001-18512_4-10315544.html') # didnt get this one to work?

# search_input.click()
#search_input.SendKeys(Keys.Return) 
# print('Button clicked?')

'#main-col > div > div > div:nth-child(8) > p:nth-child(1) > a > img'

"c-globalButton g-text-small c-productActionButton_button c-productActionButton_button-standard u-text-uppercase c-globalButton-medium c-globalButton-standard"

# WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.CSS_SELECTOR, "button#download"))).click()
#driver.quit()


# dont forget to zip everything up?
# put in local dir 

# remember to rejig environment yml 


"""
where_now = driver.current_window_handle

print("Double check current location:" + where_now)

windows = driver.window_handles

for window in windows:
    print(driver.current_window_handle)
"""

"""
try:
    cookie_clickable = EC.element_to_be_clickable((By.CSS_SELECTOR,'#onetrust-accept-btn-handler'))
    #element_present = EC.presence_of_element_located((By.ID,'onetrust-button-group-parent'))
    WebDriverWait(driver, timeout).until(cookie_clickable)
    print("Cookie is clicked")
except TimeoutException:
    print("Timed out waiting for click")
cookie_accept.click()
"""



# we good tho
#prints parent window title
"""
print("Location now: " + driver.title)

driver.switch_to_window(driver.window_handles[0])
print("Location now: " + driver.title)


if len(driver.window_handles) > 1
then switch

#get current window handle
where_now = driver.current_window_handle

print("Current location")

#get first child window
chwd = driver.window_handles

for w in chwd:
#switch focus to child window
    if(w!=p):
    driver.switch_to.window(w)
break
time.sleep(0.9)
print("Child window title: " + driver.title)
"""

"""
# change the <path_to_place_downloaded_file> to your directory where you would like to place the downloaded file
download_dir = "C:\\Users\\Emily\\Documents\\UCL\\ncc-project\\cdt-nccgroup\\dataset\\cleanware\\test"

# function to handle setting up headless download
#enable_download_headless(driver, download_dir)
#print("Enable Headless Download")

# get request to target the site selenium is active on
# driver.get("https://www.thinkbroadband.com/download")
driver.get("https://download.cnet.com/CCleaner/3001-18512_4-10315544.html")
print("Webpage retrieved")

# add wait time so elements can load properly
"""
"""
timeout = 10

try:
    element_present = EC.presence_of_element_located((By.CLASS_NAME, "spch-dlg"))
    WebDriverWait(driver, timeout).until(element_present)
    ("I loaded properly and found a button")
except NoSuchElementException:
    print('Failure!')
except TimeoutException:
    print("Timed out waiting for page to load")
else:
    print("Something else went wrong")
"""

"""
download_button = driver.find_element_by_css_selector('.c-globalButton.g-text-small.c-productActionButton_button.c-productActionButton_button-standard.u-text-uppercase.c-globalButton-medium.c-globalButton-standard')
"""
# i think it is failing bc global = everything is not loading, something to do with boomerang

# now need to click with javascript, bc selenium is being a little bitch
#download_button = driver.find_element_by_css_selector("a[href*='/3001-18512_4-10315544.html']")
"""
js_click = "arguments[0].click();"
driver.execute_script(js_click,download_button)
"""
# initialize an object to the location on the html page and click on it to download

#search_input = driver.find_element_by_css_selector('#c-productActionButton > div > div:nth-child(1) > div > div > a > div')

# def this one is being clicked
#search_input = driver.find_element_by_css_selector('.c-globalButton.g-text-small.c-productActionButton_button.c-productActionButton_button-standard.u-text-uppercase.c-globalButton-medium.c-globalButton-standard')






#search_input = driver.find_element_by_css_selector('.sm:u-col-2.md:u-col-3.lg:u-col-6')
#search_input = driver.find_element_by_css_selector('/CCleaner/3001-18512_4-10315544.html') # didnt get this one to work?

# search_input.click()
#search_input.SendKeys(Keys.Return) 
#print('Button clicked?')

'#main-col > div > div > div:nth-child(8) > p:nth-child(1) > a > img'

"c-globalButton g-text-small c-productActionButton_button c-productActionButton_button-standard u-text-uppercase c-globalButton-medium c-globalButton-standard"

# WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.CSS_SELECTOR, "button#download"))).click()
# driver.quit()